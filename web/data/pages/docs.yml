title:  Documentation
url:    /docs
format: html
--- |-
<div id="docs">
  <h2 id="template">Templating</h2>

  <p>Sometimes you need to draw things in HTML, with data from REST calls,
  or Javascript computations.  Templating is done via the <code>template()</code>
  function.  Templates are defined inside of <code>&lt;script&gt;</code>
  tags that have a <code>type</code> attribute of <code>text/html</code>.
  These script are inert; the browser will just treat them as a handy
  container for DOM elements, which is <strong>exactly</strong> what we
  want.</p>

  <pre><code>&lt;script type="text/html" id="<em>template:hello</em>"&gt;
<em>[[ if (_.name) { ]]</em>
  &lt;p&gt;Hello, <em>[[= _.name ]]</em>!&lt;/p&gt;
<em>[[ } else { ]]</em>
  &lt;p&gt;Hello, World!&lt;/p&gt;
<em>[[ } ]]</em>
&lt;/script&gt;</code></pre>

  <p>In template code, anything inside of <code>[[</code> and
  <code>]]</code> is just regular Javascript, and anything outside if
  equivalent to a <em>print</em> operation.  Rendering a template entails
  executing the Javascript bits as a single script, and printing all of the
  literal bits when it's their turn to be printed.</p>

  <p>A template without data isn't much of a template, so we have the
  ubiquitous <code>_</code> object.  When you go to render a template to get
  the HTML out, you pass in a data object that will <em>become</em>
  <code>_</code>, like this:</p>

  <pre><code>$('#main').template('hello', {
  name: 'James'
});</code></pre>

  <p>When the <em>hello</em> template executes, <code>_</code> will be bound
  to the second argument passed, giving <code>_.name</code> the value
  <code>"James"</code>.  The template will populate our <code>#main</code>
  element with the following HTML:

  <pre><code>&lt;p&gt;Hello, James!&lt;/p&gt;</code></pre>

  <aside>Incidentally, the first argument to <code>template()</code> is the
  name of our template, which will be prefixed with <code>template:</code>
  and used to find the <code>&lt;script&gt;</code> tag that contains our
  template source.</aside>

  <p>Subsequent calls to <code>template()</code> against the same element
  exhibit some useful properties.  If you omit all of the arguments, Lens will
  re-render the last template it used for the target DOM element, and the last
  data argument it was passed.  This lets you do some interesting data binding
  logic, vis:</p>

  <pre><code>var groceries = [
  'milk',
  'eggs',
  'bread'
];
$('#main').template('list', { things: groceries });

/* elsewhere... */
groceries.push('PIE');
<em>$('#main').template();</em></code></pre>

  <p>When this behavior is activated, Lens also performs <em>DOM-wise patching</em>,
  in which the newly rendered DOM sub-tree is compared to the live DOM sub-tree
  (of the target) and a minimal set of <em>change operations</em> is carried out to
  bring the live DOM in line with the desired render output.  That means that
  if our <code>list</code> template from the above example looks like this:</p>

  <pre><code>&lt;ul&gt;
<em>[[ for (var i = 0; i &lt; _.things.length; i++) { ]]</em>
  &lt;li&gt;<em>[[= _.things[i] ]]</em>&lt;/li&gt;
<em>[[ } ]]</em>
&lt;/ul&gt;</code></pre>

  <p>The first render would create a single <code>UL</code> unordered list with
  three <code>LI</code> list item children.  During the second render, Lens would
  notice that since the order of the <code>_.things</code> array has not changed,
  only the new (fourth) <code>LI</code> list item ("PIE") needs appended to the
  unordered list.  This helps to cut down on DOM flicker, and minimizes or removes
  the need to re-attach event handlers, etc.</p>

  <p>It is important to keep in mind that this <em>memory</em> of which template
  and what data were used to render are kept on a <strong>per-target</strong> basis.
  This allows you to do this:</p>

  <pre><code>$('#main').template('dashboard', data);
$('#nav').template('navigation');

$('#main').template();</code></pre>

  <p>without issue.</p>

  <p>Rendering a different template to the same target does <em>not</em> engage
  the DOM-wise patch engine; instead, the target container element will be cleared
  and completely re-drawn.  This is also what happens on the initial render of
  a previously-unseen target.</p>

  <h2 id="strftime">Formatting Dates and Times</h2>

  <p>Javascript has lacked a <code>strftime()</code> call for too long.
  Lens provides you one, with the same semantics as the (POSIX-compliant)
  GNU libc implementation.</p>

  <pre><code>Lens.strftime("%a, %b %d %Y at %I:%M %P", new Date());
    // something like "Tue, Jul 18 2017 at 9:20 am"</code></pre>

  <p>The format string is made up of <em>format specifiers</em> and literal
  text.  Format specifiers start with a <code>%</code> and are followed by
  one or more alphabetic code characters (detailed in the table below).  A
  literal percent sign is double-encoded, as <code>%%</code>.</p>

  <table class="strftime definitions">
  <tbody>
    <tr><td>%%</td>
        <td>A literal '%' character</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%a %A</td>
        <td>Weekday name.<br>
            <code>%a</code> prints an abbreviation ("Wed").<br>
            <code>%A</code> prints the full name ("Wednesday").</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%b %B</td>
        <td>Month name.<br>
            <code>%b</code> prints an abbreviation ("Mar").<br>
            <code>%B</code> prints the full name ("March").</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%c</td>
        <td>The preferred representation of the date and time.</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%C</td>
        <td>The century component of the year (i.e. year/100), as a 2-digit
            number.  2017 yields 20 as <code>%C</code>.</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%d %e</td>
        <td>The day of the month, as a number.<br>
            <code>%d</code> keeps the leading zero (ranging from 01 to 31).<br>
            <code>%e</code> space-pads the number (' 1' instead of '01').</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%D</td>
        <td>Equivalent to <code>%m/%d/y</code>.  This is an ambiguous date
        format, often only found inside the United States, and discouraged
        all over.</td>
        <td><!-- no flags --></td></tr>

    <!-- %E not supported / ignored -->

    <tr><td>%F</td>
        <td>Equivalent to <code>%Y-%m-%d</code> (ISO-8601 date format).</td>
        <td><!-- no flags --></td></tr>

    <!-- %g %G not supported / exception -->

    <tr><td>%H %k</td>
        <td>The hour as a number, using a 24-hour clock.<br>
            <code>%H</code> keeps the leading zero (ranging from 00 to 23).</br>
            <code>%k</code> space-pads the number (' 3' instead of '03').</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%I %l</td>
        <td>The hour as a number, using a 12-hour clock.<br>
            <code>%I</code> keeps the leading zero (ranging from 01 to 12).</br>
            <code>%l</code> space-pads the number (' 3' instead of '03').</td>
        <td><!-- no flags --></td></tr>

    <!-- %j not supported / exception -->

    <tr><td>%m</td>
        <td>The month as a number, ranging from 01 to 12.</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%M</td>
        <td>The minute as a number, ranging from 00 to 60.<br>
            (60 allows the presence of a leap second).</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%n</td>
        <td>A newline character</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%O</td>
        <td>The ordinal modifier.  See <a href="#strftime-modifiers">Modifiers</a>,
            below, for more details.</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%p %P</td>
        <td>AM/PM (<code>%p</code>) or am/pm (<code>%P</code>), based on the
        time.  Noon is treated as PM and midnight as AM.</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%r</td>
        <td>The time in a.m. or p.m. notation.  In the POSIX locale, this
            is equivalent to <code>%I:%M:%S %p</code>.</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%R %T</td>
        <td>The time in 24-hour notation.<br>
            <code>%T</code> includes the seconds component; <code>%R</code>
            does not.</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%s</td>
        <td>The number of seconds since the UNIX epoch<br>
            (Jan 1 1970 00:00:00 UTC).</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%t</td>
        <td>A horizontal tab character.</td>
        <td><!-- no flags --></td></tr>

    <tr><td>%u %w</td>
        <td>Weekday number.<br>
            <code>%u</code> ranges from 1 to 7, starting with Monday.<br>
            <code>%w</code> ranges from 0 to 6, starting with Sunday.</td>
        <td><!-- no flags --></td></tr>

    <!-- %U %V not supported / exception -->

    <tr><td>%x</td>
        <td>Preferred date-only representation.</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%X</td>
        <td>Preferred time-only representation.</td>
        <td><span class="flag">locale</span></td></tr>

    <tr><td>%Y %y</td>
        <td>The year as a number.<br>
            <code>%Y</code> is the full (4-digit) year.<br>
            <code>%y</code> just contains the last 2 digits (17 for 2017).</td>
        <td><!-- no flags --></td></tr>

    <!-- %z %Z not supported / exception -->
  </tbody>
  </table>

  <h3 id="strftime-modifiers">Modifiers</h3>

  <p>The <code>%O</code> format specifier adjusts the formatting logic to
  print ordinals, per the current locale.  It is insufficient on its own,
  because it needs an actual date/time component quantity to be useful.</p>

  <p>For example, in the en_US locale, formatting the first day of the month
  using <code>%Oe</code> appends the ordinal suffix <samp>st</samp> onto the
  end of <code>%e</code>'s <samp> 1</samp>, yielding <samp> 1st</samp>.
  Similar magic happens for <samp>2nd</samp>, <samp>3rd</samp>,
  <samp>11th</samp>, etc.</p>

  <h2 id="sprintf">String Formatting - Good Ol' <tt>sprintf()</tt></h2>

  <p>Javascript has also lacked a <code>sprintf()</code> call for too long.
  Lens helps out here too, with its own implementation that attempts to adhere
  to POSIX.</p>

  <pre><code>Lens.sprintf("%s: [flags %#04x] user %d (%s) connecting...",
             system, flags, user.id, user.name);</code></pre>

  <p>The format string is made up of both literal text and <em>conversion
  specifications</em>, which start with a literal <code>%</code> and ends
  with a <em>conversion specifier.</em></p>

  <p>The valid conversion specifiers are:</p>

  <table class="sprintf specifiers definitions">
  <tbody>
    <tr><td>%</td>
        <td>Emits a literal '%' character</td>
        <td></td></tr>

    <tr><td>d i</td>
        <td>Signed decimal notation.  The argument is converted into an
            integer and formatted in base 10.</td>
        <td><span class="flag">numeric</span></td></tr>

    <tr><td>u</td>
        <td>Unsigned decimal notation.  The argument is converted into an
            integer (modulo the length modifier) and formatted in base 10.
            <br>
            <code>%hhu</code> is radix-256 (8-bit).<br>
            <code>%hu</code> is radix-65536 (16-bit).<br>
            <code>%u</code> is a 32-bit radix (~4bn).<br>
            <code>%lu</code> is a 64-bit radix.<br>
            <code>%llu</code> is a 128-bit radix.</td>
        <td><span class="flag">numeric</span></td></tr>

    <tr><td>o</td>
        <td>Unsigned octal notation.  The argument is converted into an
            integer and formatted in base 8.</td>
        <td><span class="flag">numeric</span></td></tr>

    <tr><td>x X</td>
        <td>Unsigned hexadecimal notation.  The argument is converted into
            an integer and formatted in base 16.<br>
            <code>%x</code> uses <code>a-f</code> for digit values 10 - 15.<br>
            <code>%X</code> uses <code>A-F</code>, instead.</td>
        <td><span class="flag">numeric</span></td></tr>

    <tr><td>e E</td>
        <td>Signed floating-point in scientific notation.<br>
            <code>%e</code> uses a lower case 'e' notation.<br>
            <code>%E</code> uses an upper case 'E' notation.</td>
        <td><span class="flag">numeric</span></td></tr>

    <tr><td>f F g G</td>
        <td>Signed floating-point in natural notation.<br>
            These are all interchangeable, for compatibility's sake.</td>
        <td><span class="flag">numeric</span></td></tr>

    <tr><td>c</td>
        <td>Treat the numeric argument as an ASCII (8-bit) code point,
            and render the corresponding character glyph.</td>
        <td></td></tr>

    <tr><td>s</td>
        <td>A string.</td>
        <td></td></tr>

    <tr><td>j</td>
        <td>Convert the argument into a JSON string.  The <em>alternate
        representation</em> flag formats the resulting JSON with newlines
        and indenting whitespace.  The <em>precision</em> value sets the
        indent level.</td>
        <td><span class="flag custom">nonstandard</span></td></tr>
  </tbody>
  </table>

  <p>The following conversion specifiers are <strong>not</strong> supported
  by the current implementation: <code>a</code>, <code>A</code>.

  <p><strong>Note</strong> that the <code>j</code> conversion specifier is
  <em>non-standard</em>, but does not currently conflict with any known
  standard.</p>

  <h3 id="sprintf-flags">Flag Directives</h3>

  <p>Immediately following the opening <code>%</code>, you can put any
  number (including zero) of the following flags:</p>

  <table class="sprintf flags definitions">
  <tbody>
    <tr><td>#</td>
        <td>Convert the argument to its <em>alternate form</em></td></tr>

    <tr><td>0</td>
        <td>Zero-pad the argument on the left (instead of blanks) to hit the
            desired field width.  Ignored if <code>-</code> is also set.
            </td></tr>

    <tr><td>-</code></td>
        <td>Left-justify the field value within the field width.  This only
            matters if the argument does not fill up the entirety of the
            desired field width.  Takes precedence over <code>0</code>.
            </td></tr>

    <tr><td><xmp>' '</xmp></td>
        <td>(a blank space)<br>A blank should be left before a positive number.</td></tr>

    <tr><td>+</td>
        <td>Always place a sign character, either <code>+</code> or
            <code>-</code> before a numeric quantity.  Ignored for the
            <code>o</code>, <code>u</code>, <code>x</code>, or
            <code>X</code> conversion specifiers.
            </td></tr>
  </tbody>
  </table>

  <p>The <code>'</code> flag, for using thousands separators, is not
  supported in this implementation.</p>

  <h3 id="sprintf-width-and-precision">Field Widths and Precision</h3>

  <p>After the flags, a field width can be given, starting with a non-zero
  digit (to avoid confusion with the <code>0</code> flag).  If the formatted
  value takes up fewer characters than this, it will be padded on the left
  with spaces (or on the right, if the left-justify <code>-</code> flag has
  been set).</p>

  <p>For example, to print the variable <code>count</code> and
  <strong>always</strong> take up 10 characters in the string:</p>

  <pre><code>sprintf("%10d", count);</code></pre>

  <p>Following the width, you may specify a <em>precision</em>, separated
  with a dot (<code>.</code>).  This precision value determines the minimum
  number of digits rendered for the integer conversion specifiers
  (<code>d</code>, <code>i</code>, <code>u</code>, <code>o</code>,
  <code>x</code>, and <code>X</code>), and the number of digits to appear
  after the decimal point in the floating point specifiers.  For the
  <code>s</code> string conversion specifier, the precision limits the number
  of characters to be rendered from the argument string.</p>

  <h3 id="sprintf-length-modifiers">Length Modifiers</h3>

  <p>The unsigned integer conversion specifiers (<code>u</code>,
  <code>o</code>, <code>x</code>, and <code>X</code>) all treat their
  arguments modulo some bit radix.  You can adjust this radix through the
  use of <em>length modifiers</em>, which map to the powers-of-two integer
  sizes present in C!</p>

  <table class="sprintf length-modifiers definitions">
  <tbody>
    <tr><td>hh</td>
        <td>Treat the argument as an unsigned, 8-bit quantity, in the range
        (0 ... 255).</td></tr>

    <tr><td>h</td>
        <td>Treat the argument as an unsigned, 16-bit quantity, in the range
        (0 ... 65535).</td></tr>

    <tr><td>l</td>
        <td>Treat the argument as an unsigned, 64-bit quantity, in the range
        (0 ... 1.84467441 ✕ 10<sup>19</sup>), give or take.</td></tr>

    <tr><td>ll</td>
        <td>Treat the argument as an unsigned, 128-bit quantity, in the
        range (0 ... 3.40282367 ✕ 10<sup>38</sup>), approximately.</td></tr>

  </tbody>
  </table>

  <p>For example, the following calls should be equivalent:</p>

  <pre><code>var a = sprintf("%d", value % 256);
var b = sprintf("%hhu", value);</code></pre>

  <p>The following length modifiers are not supported by this
  implementation: <code>L</code>, <code>q</code>, <code>j</code>,
  <code>z</code>, and <code>t</code>.

</div>
